name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "**/*.py"
      - "requirements.txt"
      - "manage.py"
      - "white88_backend/**"
      - "users/**"
      - "bongda/**"
      - "lode/**"
      - "taixiu/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "**/*.py"
      - "requirements.txt"
      - "manage.py"
      - "white88_backend/**"
      - "users/**"
      - "bongda/**"
      - "lode/**"
      - "taixiu/**"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov bandit safety

      - name: Run security checks
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py collectstatic --noinput
          python manage.py test --verbosity=2 --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          black --check .
          isort --check-only --diff .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: False
        run: |
          python manage.py collectstatic --noinput
          python manage.py check --deploy

      - name: Create build artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: |
            white88_backend/
            users/
            bongda/
            lode/
            taixiu/
            manage.py
            requirements.txt
            staticfiles/
